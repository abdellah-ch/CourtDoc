{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abdellah/Documents/messagerie-app/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf;MARS","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abdellah/Documents/messagerie-app/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,6LAAC,oKAAA,CAAA,OAAmB;QAClB,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uNACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abdellah/Documents/messagerie-app/src/app/admin/users/page.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport * as z from 'zod'\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardContent,\r\n    CardFooter,\r\n} from '@/components/ui/card'\r\nimport {\r\n    Table,\r\n    TableHeader,\r\n    TableRow,\r\n    TableHead,\r\n    TableBody,\r\n    TableCell,\r\n} from '@/components/ui/table'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from '@/components/ui/select'\r\nimport { Calendar } from '@/components/ui/calendar'\r\nimport { CalendarIcon } from '@radix-ui/react-icons'\r\nimport { format } from 'date-fns'\r\nimport { cn } from '@/lib/utils'\r\nimport {\r\n    Popover,\r\n    PopoverContent,\r\n    PopoverTrigger,\r\n} from '@/components/ui/popover'\r\nimport { toast } from 'sonner'\r\nimport { Badge } from '@/components/ui/badge'\r\n\r\n// Form validation schema\r\nconst formSchema = z.object({\r\n    CodeUtilisateur: z.string().min(1, 'Required'),\r\n    MotDePasse: z.string().min(6, 'Password must be at least 6 characters'),\r\n    Nom: z.string().min(1, 'Required'),\r\n    Prenom: z.string().min(1, 'Required'),\r\n    Tel: z.string().optional(),\r\n    Email: z.string().email('Invalid email').optional(),\r\n    DateEmbauche: z.date(),\r\n    DateAffectation: z.date(),\r\n    IdRole: z.string().min(1, 'Required'),\r\n    IdCadre: z.string().min(1, 'Required'),\r\n    IdUserFonctionne: z.string().min(1, 'Required'),\r\n})\r\n\r\ntype User = {\r\n    IdUtilisateur: number\r\n    Nom: string\r\n    Prenom: string\r\n    Email: string\r\n    Tel: string\r\n    Roles?: { Libelle: string; IdRole: number }\r\n    Cadre?: { Libelle: string; IdCadre: number }\r\n    UserFonctionne?: { Libelle: string; IdUserFonctionne: number }\r\n}\r\n\r\n// Mock data for dropdowns - replace with your actual data fetching\r\nconst roles = [\r\n    { IdRole: 1, Libelle: 'Admin' },\r\n    { IdRole: 2, Libelle: 'Manager' },\r\n    { IdRole: 3, Libelle: 'User' },\r\n]\r\n\r\nconst cadres = [\r\n    { IdCadre: 1, Libelle: 'Executive' },\r\n    { IdCadre: 2, Libelle: 'Middle Management' },\r\n    { IdCadre: 3, Libelle: 'Staff' },\r\n]\r\n\r\nconst fonctions = [\r\n    { IdUserFonctionne: 1, Libelle: 'Developer' },\r\n    { IdUserFonctionne: 2, Libelle: 'Designer' },\r\n    { IdUserFonctionne: 3, Libelle: 'Analyst' },\r\n]\r\n\r\nexport default function ManageUsers() {\r\n    const [users, setUsers] = useState<User[]>([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [date, setDate] = useState<Date>()\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        control,\r\n        reset,\r\n        setValue,\r\n        formState: { errors },\r\n    } = useForm<z.infer<typeof formSchema>>({\r\n        resolver: zodResolver(formSchema),\r\n        defaultValues: {\r\n            CodeUtilisateur: '',\r\n            MotDePasse: '',\r\n            Nom: '',\r\n            Prenom: '',\r\n            Tel: '',\r\n            Email: '',\r\n            IdRole: '',\r\n            IdCadre: '',\r\n            IdUserFonctionne: '',\r\n        },\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            setIsLoading(true)\r\n            try {\r\n                // Replace with your actual API call\r\n                // const response = await fetch('/api/users')\r\n                // const data = await response.json()\r\n                // setUsers(data)\r\n\r\n                // Mock data for demonstration\r\n                setUsers([\r\n                    {\r\n                        IdUtilisateur: 1,\r\n                        Nom: 'Doe',\r\n                        Prenom: 'John',\r\n                        Email: 'john.doe@example.com',\r\n                        Tel: '1234567890',\r\n                        Roles: { Libelle: 'Admin', IdRole: 1 },\r\n                        Cadre: { Libelle: 'Executive', IdCadre: 1 },\r\n                        UserFonctionne: { Libelle: 'Developer', IdUserFonctionne: 1 },\r\n                    },\r\n                ])\r\n            } catch (error) {\r\n                toast.error('Failed to fetch users')\r\n            } finally {\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        fetchUsers()\r\n    }, [])\r\n\r\n    const onSubmit = async (data: z.infer<typeof formSchema>) => {\r\n        setIsLoading(true)\r\n        try {\r\n            // Replace with your actual API call\r\n            // const response = await fetch('/api/users', {\r\n            //   method: 'POST',\r\n            //   headers: { 'Content-Type': 'application/json' },\r\n            //   body: JSON.stringify(data),\r\n            // })\r\n\r\n            // Mock success response\r\n            const newUser = {\r\n                IdUtilisateur: users.length + 1,\r\n                Nom: data.Nom,\r\n                Prenom: data.Prenom,\r\n                Email: data.Email || '',\r\n                Tel: data.Tel || '',\r\n                Roles: roles.find(r => r.IdRole === parseInt(data.IdRole)),\r\n                Cadre: cadres.find(c => c.IdCadre === parseInt(data.IdCadre)),\r\n                UserFonctionne: fonctions.find(f => f.IdUserFonctionne === parseInt(data.IdUserFonctionne)),\r\n            }\r\n\r\n            setUsers([...users, newUser])\r\n            reset()\r\n            toast.success('User created successfully')\r\n        } catch (error) {\r\n            toast.error('Failed to create user')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mx-auto py-8\">\r\n            <Card>\r\n                <CardHeader>\r\n                    <CardTitle className=\"text-2xl font-bold\">User Management</CardTitle>\r\n                </CardHeader>\r\n\r\n                <CardContent>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                            {/* Personal Information */}\r\n                            <div className=\"space-y-4\">\r\n                                <h3 className=\"text-lg font-semibold\">Personal Information</h3>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"CodeUtilisateur\">User Code</Label>\r\n                                    <Input\r\n                                        id=\"CodeUtilisateur\"\r\n                                        {...register('CodeUtilisateur')}\r\n                                        placeholder=\"12345\"\r\n                                    />\r\n                                    {errors.CodeUtilisateur && (\r\n                                        <p className=\"text-sm text-red-500\">\r\n                                            {errors.CodeUtilisateur.message}\r\n                                        </p>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"MotDePasse\">Password</Label>\r\n                                    <Input\r\n                                        id=\"MotDePasse\"\r\n                                        type=\"password\"\r\n                                        {...register('MotDePasse')}\r\n                                        placeholder=\"••••••\"\r\n                                    />\r\n                                    {errors.MotDePasse && (\r\n                                        <p className=\"text-sm text-red-500\">\r\n                                            {errors.MotDePasse.message}\r\n                                        </p>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"Nom\">Last Name</Label>\r\n                                    <Input\r\n                                        id=\"Nom\"\r\n                                        {...register('Nom')}\r\n                                        placeholder=\"Doe\"\r\n                                    />\r\n                                    {errors.Nom && (\r\n                                        <p className=\"text-sm text-red-500\">{errors.Nom.message}</p>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"Prenom\">First Name</Label>\r\n                                    <Input\r\n                                        id=\"Prenom\"\r\n                                        {...register('Prenom')}\r\n                                        placeholder=\"John\"\r\n                                    />\r\n                                    {errors.Prenom && (\r\n                                        <p className=\"text-sm text-red-500\">{errors.Prenom.message}</p>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Contact Information */}\r\n                            <div className=\"space-y-4\">\r\n                                <h3 className=\"text-lg font-semibold\">Contact Information</h3>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"Tel\">Phone</Label>\r\n                                    <Input\r\n                                        id=\"Tel\"\r\n                                        {...register('Tel')}\r\n                                        placeholder=\"+1234567890\"\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"Email\">Email</Label>\r\n                                    <Input\r\n                                        id=\"Email\"\r\n                                        type=\"email\"\r\n                                        {...register('Email')}\r\n                                        placeholder=\"john.doe@example.com\"\r\n                                    />\r\n                                    {errors.Email && (\r\n                                        <p className=\"text-sm text-red-500\">{errors.Email.message}</p>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label>Hire Date</Label>\r\n                                    <Popover>\r\n                                        <PopoverTrigger asChild>\r\n                                            <Button\r\n                                                variant=\"outline\"\r\n                                                className={cn(\r\n                                                    \"w-full justify-start text-left font-normal\",\r\n                                                    !date && \"text-muted-foreground\"\r\n                                                )}\r\n                                            >\r\n                                                <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                                                {date ? format(date, \"PPP\") : <span>Pick a date</span>}\r\n                                            </Button>\r\n                                        </PopoverTrigger>\r\n                                        <PopoverContent className=\"w-auto p-0\">\r\n                                            <Calendar\r\n                                                mode=\"single\"\r\n                                                selected={date}\r\n                                                onSelect={(d) => {\r\n                                                    setDate(d)\r\n                                                    setValue(\"DateEmbauche\", d || new Date())\r\n                                                }}\r\n                                                initialFocus\r\n                                            />\r\n                                        </PopoverContent>\r\n                                    </Popover>\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label>Assignment Date</Label>\r\n                                    <Popover>\r\n                                        <PopoverTrigger asChild>\r\n                                            <Button\r\n                                                variant=\"outline\"\r\n                                                className={cn(\r\n                                                    \"w-full justify-start text-left font-normal\",\r\n                                                    !date && \"text-muted-foreground\"\r\n                                                )}\r\n                                            >\r\n                                                <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                                                {date ? format(date, \"PPP\") : <span>Pick a date</span>}\r\n                                            </Button>\r\n                                        </PopoverTrigger>\r\n                                        <PopoverContent className=\"w-auto p-0\">\r\n                                            <Calendar\r\n                                                mode=\"single\"\r\n                                                selected={date}\r\n                                                onSelect={(d) => {\r\n                                                    setDate(d)\r\n                                                    setValue(\"DateAffectation\", d || new Date())\r\n                                                }}\r\n                                                initialFocus\r\n                                            />\r\n                                        </PopoverContent>\r\n                                    </Popover>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Role Selection */}\r\n                            <div className=\"space-y-4\">\r\n                                <h3 className=\"text-lg font-semibold\">Role & Position</h3>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"IdRole\">Role</Label>\r\n                                    <Select\r\n                                        onValueChange={(value) => setValue(\"IdRole\", value)}\r\n                                        defaultValue=\"\"\r\n                                    >\r\n                                        <SelectTrigger>\r\n                                            <SelectValue placeholder=\"Select a role\" />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                            {roles.map((role) => (\r\n                                                <SelectItem key={role.IdRole} value={role.IdRole.toString()}>\r\n                                                    {role.Libelle}\r\n                                                </SelectItem>\r\n                                            ))}\r\n                                        </SelectContent>\r\n                                    </Select>\r\n                                    {errors.IdRole && (\r\n                                        <p className=\"text-sm text-red-500\">{errors.IdRole.message}</p>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"IdCadre\">Cadre</Label>\r\n                                    <Select\r\n                                        onValueChange={(value) => setValue(\"IdCadre\", value)}\r\n                                        defaultValue=\"\"\r\n                                    >\r\n                                        <SelectTrigger>\r\n                                            <SelectValue placeholder=\"Select a cadre\" />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                            {cadres.map((cadre) => (\r\n                                                <SelectItem key={cadre.IdCadre} value={cadre.IdCadre.toString()}>\r\n                                                    {cadre.Libelle}\r\n                                                </SelectItem>\r\n                                            ))}\r\n                                        </SelectContent>\r\n                                    </Select>\r\n                                    {errors.IdCadre && (\r\n                                        <p className=\"text-sm text-red-500\">{errors.IdCadre.message}</p>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"IdUserFonctionne\">Function</Label>\r\n                                    <Select\r\n                                        onValueChange={(value) => setValue(\"IdUserFonctionne\", value)}\r\n                                        defaultValue=\"\"\r\n                                    >\r\n                                        <SelectTrigger>\r\n                                            <SelectValue placeholder=\"Select a function\" />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                            {fonctions.map((fn) => (\r\n                                                <SelectItem key={fn.IdUserFonctionne} value={fn.IdUserFonctionne.toString()}>\r\n                                                    {fn.Libelle}\r\n                                                </SelectItem>\r\n                                            ))}\r\n                                        </SelectContent>\r\n                                    </Select>\r\n                                    {errors.IdUserFonctionne && (\r\n                                        <p className=\"text-sm text-red-500\">\r\n                                            {errors.IdUserFonctionne.message}\r\n                                        </p>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-end\">\r\n                            <Button type=\"submit\" disabled={isLoading}>\r\n                                {isLoading ? 'Creating...' : 'Create User'}\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            {/* Users Table */}\r\n            <Card className=\"mt-8\">\r\n                <CardHeader>\r\n                    <CardTitle>User List</CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <Table>\r\n                        <TableHeader>\r\n                            <TableRow>\r\n                                <TableHead>Name</TableHead>\r\n                                <TableHead>Email</TableHead>\r\n                                <TableHead>Phone</TableHead>\r\n                                <TableHead>Role</TableHead>\r\n                                <TableHead>Cadre</TableHead>\r\n                                <TableHead>Function</TableHead>\r\n                            </TableRow>\r\n                        </TableHeader>\r\n                        <TableBody>\r\n                            {users.map((user) => (\r\n                                <TableRow key={user.IdUtilisateur}>\r\n                                    <TableCell className=\"font-medium\">\r\n                                        {user.Prenom} {user.Nom}\r\n                                    </TableCell>\r\n                                    <TableCell>{user.Email}</TableCell>\r\n                                    <TableCell>{user.Tel}</TableCell>\r\n                                    <TableCell>\r\n                                        <Badge variant=\"outline\">\r\n                                            {user.Roles?.Libelle}\r\n                                        </Badge>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <Badge variant=\"secondary\">\r\n                                            {user.Cadre?.Libelle}\r\n                                        </Badge>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <Badge variant=\"outline\">\r\n                                            {user.UserFonctionne?.Libelle}\r\n                                        </Badge>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1240, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abdellah/Documents/messagerie-app/node_modules/%40radix-ui/react-label/src/label.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelElement = React.ElementRef<typeof Primitive.label>;\ntype PrimitiveLabelProps = React.ComponentPropsWithoutRef<typeof Primitive.label>;\ninterface LabelProps extends PrimitiveLabelProps {}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  return (\n    <Primitive.label\n      {...props}\n      ref={forwardedRef}\n      onMouseDown={(event) => {\n        // only prevent text selection if clicking inside the label itself\n        const target = event.target as HTMLElement;\n        if (target.closest('button, input, select, textarea')) return;\n\n        props.onMouseDown?.(event);\n        // prevent text selection when double clicking label\n        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n      }}\n    />\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n};\nexport type { LabelProps };\n"],"names":[],"mappings":";;;;;AAAA,YAAY,WAAW;AACvB,SAAS,iBAAiB;AActB;;;;;AARJ,IAAM,OAAO;AAMb,IAAM,0KAAc,aAAA,EAAqC,CAAC,OAAO,iBAAiB;IAChF,OACE,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,2KAAC,YAAA,CAAU,KAAA,EAAV;QACE,GAAG,KAAA;QACJ,KAAK;QACL,aAAa,CAAC,UAAU;YAEtB,MAAM,SAAS,MAAM,MAAA;YACrB,IAAI,OAAO,OAAA,CAAQ,iCAAiC,EAAG,CAAA;YAEvD,MAAM,WAAA,GAAc,KAAK;YAEzB,IAAI,CAAC,MAAM,gBAAA,IAAoB,MAAM,MAAA,GAAS,EAAG,CAAA,MAAM,cAAA,CAAe;QACxE;IAAA;AAGN,CAAC;AAED,MAAM,WAAA,GAAc;AAIpB,IAAM,OAAO","ignoreList":[0],"debugId":null}}]
}