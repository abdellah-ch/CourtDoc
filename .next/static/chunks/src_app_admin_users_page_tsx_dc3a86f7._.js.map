{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/abdellah/Documents/messagerie-app/src/app/admin/users/page.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst ManageUsers = () => {\r\n    interface User {\r\n        IdUtilisateur: number\r\n        Nom: string\r\n        Prenom: string\r\n        Email: string\r\n        Tel: string\r\n        Roles?: { Libelle: string }\r\n        Cadre?: { Libelle: string }\r\n        UserFonctionne?: { Libelle: string }\r\n    }\r\n\r\n    const [users, setUsers] = useState<User[]>([])\r\n    interface FormData {\r\n        CodeUtilisateur: string\r\n        IdRole: string\r\n        IdCadre: string\r\n        IdUserFonctionne: string\r\n        DateEmbauche: string\r\n        DateAffectation: string\r\n        [key: string]: string // Allow additional fields if needed\r\n    }\r\n\r\n    const [formData, setFormData] = useState<FormData>({\r\n        CodeUtilisateur: '',\r\n        IdRole: '',\r\n        IdCadre: '',\r\n        IdUserFonctionne: '',\r\n        DateEmbauche: '',\r\n        DateAffectation: '',\r\n    })\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            setIsLoading(true)\r\n            try {\r\n                const response = await fetch('/api/users')\r\n                const data = await response.json()\r\n                setUsers(data)\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error)\r\n            } finally {\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        fetchUsers()\r\n    }, [])\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        try {\r\n            const response = await fetch('/api/users', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    ...formData,\r\n                    CodeUtilisateur: parseInt(formData.CodeUtilisateur),\r\n                    IdRole: parseInt(formData.IdRole),\r\n                    IdCadre: parseInt(formData.IdCadre),\r\n                    IdUserFonctionne: parseInt(formData.IdUserFonctionne),\r\n                    DateEmbauche: new Date(formData.DateEmbauche),\r\n                    DateAffectation: new Date(formData.DateAffectation),\r\n                }),\r\n            })\r\n\r\n            if (!response.ok) throw new Error('Failed to create user')\r\n\r\n            const newUser = await response.json()\r\n            setUsers([...users, newUser])\r\n\r\n            // Reset form\r\n            setFormData({\r\n                CodeUtilisateur: '',\r\n                IdRole: '',\r\n                IdCadre: '',\r\n                IdUserFonctionne: '',\r\n                DateEmbauche: '',\r\n                DateAffectation: '',\r\n            9})\r\n        } catch (error) {\r\n            console.error('Error creating user:', error)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // ...keep your existing render logic, but add loading states\r\n    return (\r\n        <div className=\"p-4\">\r\n            <h1 className=\"text-xl font-bold mb-4\">Manage Users</h1>\r\n\r\n            {isLoading && <div className=\"mb-4\">Loading...</div>}\r\n\r\n            {/* Rest of your form and table */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageUsers"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAIA,MAAM,cAAc;;IAYhB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAW7C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY;QAC/C,iBAAiB;QACjB,QAAQ;QACR,SAAS;QACT,kBAAkB;QAClB,cAAc;QACd,iBAAiB;IACrB;IACA,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACN,MAAM;oDAAa;oBACf,aAAa;oBACb,IAAI;wBACA,MAAM,WAAW,MAAM,MAAM;wBAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;wBAChC,SAAS;oBACb,EAAE,OAAO,OAAO;wBACZ,QAAQ,KAAK,CAAC,yBAAyB;oBAC3C,SAAU;wBACN,aAAa;oBACjB;gBACJ;;YACA;QACJ;gCAAG,EAAE;IAEL,MAAM,eAAe,OAAO;QACxB,EAAE,cAAc;QAChB,aAAa;QACb,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,cAAc;gBACvC,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACjB,GAAG,QAAQ;oBACX,iBAAiB,SAAS,SAAS,eAAe;oBAClD,QAAQ,SAAS,SAAS,MAAM;oBAChC,SAAS,SAAS,SAAS,OAAO;oBAClC,kBAAkB,SAAS,SAAS,gBAAgB;oBACpD,cAAc,IAAI,KAAK,SAAS,YAAY;oBAC5C,iBAAiB,IAAI,KAAK,SAAS,eAAe;gBACtD;YACJ;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAElC,MAAM,UAAU,MAAM,SAAS,IAAI;YACnC,SAAS;mBAAI;gBAAO;aAAQ;YAE5B,aAAa;YACb,YAAY;gBACR,iBAAiB;gBACjB,QAAQ;gBACR,SAAS;gBACT,kBAAkB;gBAClB,cAAc;gBACd,iBAAiB;gBACrB,GAAA,SAAC;YAAA;QACL,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,wBAAwB;QAC1C,SAAU;YACN,aAAa;QACjB;IACJ;IAEA,6DAA6D;IAC7D,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAG,WAAU;0BAAyB;;;;;;YAEtC,2BAAa,6LAAC;gBAAI,WAAU;0BAAO;;;;;;;;;;;;AAKhD;GApGM;KAAA;uCAsGS","debugId":null}}]
}